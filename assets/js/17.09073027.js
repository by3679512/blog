(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{426:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("JavaScript是一门单线程脚本语言，意味着JavaScript中的所有代码都是按照顺序一行一行执行的。")]),t._v(" "),s("p",[t._v("为了处理异步操作，JavaScript引入了事件循环机制（Event Loop）来协调异步操作和同步代码的执行。")]),t._v(" "),s("h2",{attrs:{id:"javascript运行机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript运行机制"}},[t._v("#")]),t._v(" JavaScript运行机制")]),t._v(" "),s("p",[t._v("JavaScript引擎在执行JavaScript代码时，会将任务分为两类："),s("code",[t._v("同步任务")]),t._v("和"),s("code",[t._v("异步任务")]),t._v("。同步任务在主线程上执行，而异步任务则由"),s("code",[t._v("任务队列")]),t._v("中的事件循环机制异步执行。在异步任务完成后，就会将该任务对应的回调函数放入任务队列中，并等待主线程执行完当前所有的同步任务后再执行该回调函数。")]),t._v(" "),s("blockquote",[s("p",[t._v("JavaScript中的回调函数是一种特殊的函数，它作为另一个函数的参数传递进去，在该函数执行完特定的操作后被异步调用。")])]),t._v(" "),s("p",[t._v("下面我们就详细介绍一下JavaScript任务循环的机制。")]),t._v(" "),s("h2",{attrs:{id:"事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),s("p",[t._v("事件循环是指不断从任务队列中取出任务，并执行其对应的回调函数的过程。事件循环在JavaScript引擎内部以非常高效的方式运行，在等待异步I/O操作返回数据时，可以将CPU时间释放给其他线程使用。")]),t._v(" "),s("p",[t._v("事件循环的基本流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("主线程执行同步任务，直到遇到异步任务时，将其回调函数添加到任务队列中，然后继续执行同步任务。")]),t._v(" "),s("li",[t._v("当所有同步任务执行完成后，主线程会立即去"),s("code",[t._v("任务队列")]),t._v("中查找是否有已经完成的异步任务的回调函数需要执行，如果有，则会按照回调函数添加的先后顺序执行它们。")]),t._v(" "),s("li",[t._v("执行完所有已经完成的异步任务回调函数后，重复步骤2，直到"),s("code",[t._v("任务队列")]),t._v("中没有任何任务。")])]),t._v(" "),s("h2",{attrs:{id:"任务队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务队列"}},[t._v("#")]),t._v(" 任务队列")]),t._v(" "),s("p",[t._v("任务队列是指在JavaScript引擎中用来存储"),s("code",[t._v("异步任务")]),t._v("的队列，任务队列中的每个任务都与一个回调函数相关联。当异步任务执行完成后，JavaScript引擎将相应的回调函数添加到任务队列中，等待主线程执行完当前的同步任务后再执行这些回调函数。")]),t._v(" "),s("h2",{attrs:{id:"微任务和宏任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微任务和宏任务"}},[t._v("#")]),t._v(" 微任务和宏任务")]),t._v(" "),s("p",[t._v("在任务队列中，异步任务被分为微任务和宏任务两种类型。宏任务通常是由事件触发或者定时器设定的，而微任务则是它们的回调函数。")]),t._v(" "),s("p",[t._v("在事件循环的过程中，执行顺序优先处理微任务，只有当微任务队列为空时才会去处理宏任务。这样可以保证微任务能够尽可能快地执行，从而提高了程序的响应性和性能。")]),t._v(" "),s("p",[t._v("常见的微任务包括Promise的回调函数、MutationObserver的回调函数等。")]),t._v(" "),s("p",[t._v("而常见的宏任务包括定时器任务、I/O任务、UI渲染任务等。")]),t._v(" "),s("ul",[s("li",[t._v("定时器任务（setTimeout、setInterval）：当计时器到达设定时间后，将其回调函数添加到任务队列中。")]),t._v(" "),s("li",[t._v("I/O任务（包括网络请求、文件读写等）：当异步I/O操作完成后，将其回调函数添加到任务队列中。")]),t._v(" "),s("li",[t._v("UI渲染任务：当需要更新页面的状态时，将相关的UI操作添加到任务队列中。")])]),t._v(" "),s("p",[t._v("示例代码")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Start"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Timeout"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nPromise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Promise 1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Promise 2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"End"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("执行以上代码，我们预期的输出结果应该是：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Start\nEnd\nPromise "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nPromise "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nTimeout\n")])])]),s("p",[s("strong",[t._v("分析过程")])]),t._v(" "),s("ul",[s("li",[t._v("主线程执行同步代码，输出Start和End。")]),t._v(" "),s("li",[t._v("主线程执行Promise.resolve()方法，将Promise的回调函数添加到微任务队列中。由于Promise的回调函数只是一个简单的console.log语句，执行速度非常快，因此Promise 1和Promise 2的输出结果将出现在Timeout之前。")]),t._v(" "),s("li",[t._v("主线程执行setTimeout函数，将其对应回调函数添加到宏任务队列中。由于定时器的延迟时间设置为0，因此定时器回调函数的执行顺序将靠后。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);